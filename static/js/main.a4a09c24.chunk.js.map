{"version":3,"sources":["components/Furmulario.jsx","components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","onSubmit","preventDefault","trim","id","uuidv4","htmlFor","type","className","placeholder","onChange","Cita","eliminarCita","onClick","proType","PropTypes","object","isRequired","func","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4a09c24.chunk.js","sourcesContent":["import { Fragment, useState } from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\n// aplicamos destructurig para pasarle la funcion crear cita que viene desde App.js\nconst Formulario = ({crearCita}) => {\n  const [cita, actualizarCita] = useState({\n    mascota: \"\",\n    propietario: \"\",\n    fecha: \"\",\n    hora: \"\",\n    sintomas: \"\"\n  });\n\n  //use Satate para el error\n\n  const [error, actualizarError] = useState(false);\n\n  //Funci칩n que se ejecuta una vez el usuario empieza a escribir...\n  const actualizarState = (e) => {\n    actualizarCita({\n      ...cita,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  // destructurig\n  const {  mascota, propietario, fecha, hora, sintomas } = cita;\n\n  //cuando el usuario presiona agragrar cita\n  const submitCita = (e) => {\n    e.preventDefault();\n    // validar el formulario\n    // trim() elimina los espacios en blanc en ambos sentidos der ,izq\n    if ( mascota.trim() === \"\" || propietario.trim() === \"\" || fecha.trim() === \"\" || \n    hora.trim() === \"\" || sintomas.trim() === \"\"\n    ) {\n      actualizarError(true);\n\n      return;\n    }\n    //llamamos la funcion de nuevo para que el mesaje de la validacion no se muestre m치s\n    actualizarError(false);\n\n    // asignar un id\n    cita.id = uuidv4();\n    \n    //crear a cita\n    crearCita(cita);\n\n    //reiniciamos el form\n    actualizarCita({\n      mascota: \"\",\n      propietario: \"\",\n      fecha: \"\",\n      hora: \"\",\n      sintomas: \"\"\n    })\n  };\n\n\n  return (\n    <Fragment>\n      <h2>Crear Cita</h2>\n      \n\n      <form onSubmit={submitCita}>\n        <label htmlFor=\"\">Nombre de la Mascota</label>\n        <input\n          type=\"text\"\n          name=\"mascota\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre Mascota\"\n          onChange={actualizarState}\n          value={mascota}\n        />\n\n        <label htmlFor=\"\">Nombre del Due침o</label>\n        <input\n          type=\"text\"\n          name=\"propietario\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre due침o de la Mascota\"\n          onChange={actualizarState}\n          value={propietario}\n        />\n\n        <label htmlFor=\"\">Fecha</label>\n        <input\n          type=\"date\"\n          name=\"fecha\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={fecha}\n        />\n\n        <label htmlFor=\"\">Hora</label>\n        <input\n          type=\"time\"\n          name=\"hora\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={hora}\n        />\n\n        <label htmlFor=\"\">Sintomas</label>\n        <textarea\n          name=\"sintomas\"\n          className=\"u-full-width\"\n          id=\"\"\n          placeholder=\"Sintomas que presenta la mascota\"\n          onChange={actualizarState}\n          value={sintomas}\n        ></textarea>\n\n        {/*si hay un error se ejecuta la alerta de lo contrario es null*/}\n      {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null}\n\n        <button type=\"sumit\" className=\"u-full-width button-add\">\n          Agregar Cita\n        </button>\n      </form>\n    </Fragment>\n  );\n};\n\n//propTypes documentando el codigo, o saber que son y cuales son las funciones.\n\nFormulario.propTypes = {\n  crearCita: PropTypes.func.isRequired\n}\n\n\nexport default Formulario;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Cita = ({cita, eliminarCita}) => ( \n\n    <div className = \"cita\">\n        <p>Mascota: <span>{cita.mascota}</span></p>\n        <p>Propietario: <span>{cita.propietario}</span></p>\n        <p>Fecha: <span>{cita.fecha}</span></p>\n        <p>Hora: <span>{cita.hora}</span></p>\n        <p>Sintomas: <span>{cita.sintomas}</span></p>\n\n        <button\n        className = \"button eliminar u-full-width\"\n       //se pone como una arrow funtion una vez llamada se ejecuta\n       // y se le pasa cita.id por que es la que se toma como referencia para eliminar\n        onClick = {()=> eliminarCita(cita.id)}\n        \n        \n        >Eliminar &times;</button>\n    </div>\n );\n\n Cita.proType = {\n     cita : PropTypes.object.isRequired,\n     eliminarCita: PropTypes.func.isRequired\n }\n\n \nexport default Cita;","import { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./components/Furmulario\";\nimport Cita from \"./components/Cita\";\n\n\n\nfunction App() {\n\n  //agregando las citas al localStorage\nlet citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales){\n    citasIniciales = [];\n  }\n  // arrego de citas el arreglo que contiene e listado de citas en plural citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  // useEffect para saber cuando e estado de useState cambia de estado\n  useEffect(() => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n    \n    if (citasIniciales) {\n      localStorage.setItem('citas',JSON.stringify(citas));\n    }\n    else{\n      localStorage.setItem('citas',JSON.stringify([]));\n\n    }\n  }, [citas]);\n\n\n  //funcion que va a tomar las citas actules y agregre la nueva\n  const crearCita = (cita) => {\n    guardarCitas([...citas, cita]);\n  };\n\n  // Funcion que elimina  una cita por su id\n  const eliminarCita = (id) => {\n    // se crea un nuevo arreglo con filter para que me traiga las diferentes a el elemento selecciionada\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(nuevasCitas);\n  };\n  // cuando no hay citas\n\n  const titulo = citas.length ? \"Administra Citas\" : \"No hay Citas\"\n  return (\n    <Fragment>\n      <div className=\"container\">\n        <div className=\"border-top\">\n          <h1>Administrador de Pascientes</h1>\n        </div>\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            {/*componente formulario*/}\n            <Formulario \n            crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">\n            {/*componente listar citas*/}\n            <h2>{titulo}</h2>\n            {citas.map((cita) => (\n              <Cita \n              key={cita.id} \n              cita={cita} \n              eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}